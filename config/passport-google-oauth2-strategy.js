const passport=require("passport");//requiring passport and its existing instance will be used
const GoogleStrategy=require("passport-google-oauth").OAuth2Strategy;//getting the google oauth 2 strategy
const crypto=require("crypto");//requiring crypto i.e. used for generating random passwords
const User=require("../models/user");//getting the model for which the userSchema has been defined

// telling passport to use the google strategy and we provide to it the client id, secret and the callback url, a callback function is also provided. We provide to the callback function, an accessToken(generated by google and given to us(can access a lot of unformation via it, with permissions defined at the time of its creation, can request a new one with changed permission)), refreshToken(used to get a new access token, in case the previous one expires), profile(contains the profile information) and the done callback

passport.use(new GoogleStrategy({

    clientID: "641169122276-fb4u057fek99592ip96lh5ktmo4ovfb6.apps.googleusercontent.com",
    clientSecret: "Mxs-17GuWXVtn1UmSyFxhI-U",
    callbackURL: "http://localhost:8000/users/auth/google/callback"
    
}, function(accessToken, refreshToken, profile, done){

    // finding the user with the help of its email(a particular email is selected from the list provided by google and we consider its value(can have multiple fields)) and then we have an exec callback

    User.findOne({email: profile.emails[0].value}).exec(function(err, user){

        // if there is an error, we return the error to passport, in case the user has been found, we return the user to passport(with no error) and in case the user is not found, then we create the user and then send it to passport(with no error)

        if(err){

            console.log("Error : "+err);
            return done(err);

        }

        if(user){
            return done(null, user);
        }
        else{

            // creating a user with the name as displayed name on the profile, email as the value of the 0th email and password is genrated using crypto(is of length of 20 bytes, converted to hex string format) and then we have a callback(setting the user as req.user i.e. signing it in)

            User.create({

                name: profile.displayName,
                email: profile.emails[0].value,
                password: crypto.randomBytes(20).toString("hex")

            }, function(err, user){

                // if there is an error, we print an error message and return the error to passport and return the user(with no error), if there is no error

                if(err){

                    console.log("Error : "+err);
                    return done(err);

                }

                return done(null, user);

            });

        }

    });

}));

module.exports=passport;//exporting passport, for making the google oauth strategy available wherever needed